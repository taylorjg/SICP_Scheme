(define (make-rat n d)
  (let ((g (gcd n d))
        (n-d-pair (cond ((>= d 0) (cons n d))
                        (else (cons (* n -1) (* d -1))))))
    (cons (/ (car n-d-pair) g) (/ (cdr n-d-pair) g))))

(define (numer x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define one-half (make-rat 1 2))
(define minus-one-half-a (make-rat -1 2))
(define minus-one-half-b (make-rat 1 -2))
(define minus-one-half-c (make-rat -1 -2))
(print-rat one-half)
(print-rat minus-one-half-a)
(print-rat minus-one-half-b)
(print-rat minus-one-half-c)
